// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../../common/connector.go

//package mock_common
package mock

import (
	. "github.com/ghilbut/ygg.go/common"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Connector interface
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectorRecorder
}

// Recorder for MockConnector (not exported)
type _MockConnectorRecorder struct {
	mock *MockConnector
}

func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &_MockConnectorRecorder{mock}
	return mock
}

func (_m *MockConnector) EXPECT() *_MockConnectorRecorder {
	return _m.recorder
}

func (_m *MockConnector) BindDelegate(delegate ConnectorDelegate) {
	_m.ctrl.Call(_m, "BindDelegate", delegate)
}

func (_mr *_MockConnectorRecorder) BindDelegate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindDelegate", arg0)
}

func (_m *MockConnector) UnbindDelegate() {
	_m.ctrl.Call(_m, "UnbindDelegate")
}

func (_mr *_MockConnectorRecorder) UnbindDelegate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnbindDelegate")
}

func (_m *MockConnector) SendText(text string) {
	_m.ctrl.Call(_m, "SendText", text)
}

func (_mr *_MockConnectorRecorder) SendText(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendText", arg0)
}

func (_m *MockConnector) SendBinary(bytes []byte) {
	_m.ctrl.Call(_m, "SendBinary", bytes)
}

func (_mr *_MockConnectorRecorder) SendBinary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendBinary", arg0)
}

func (_m *MockConnector) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockConnectorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of ConnectorDelegate interface
type MockConnectorDelegate struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectorDelegateRecorder
}

// Recorder for MockConnectorDelegate (not exported)
type _MockConnectorDelegateRecorder struct {
	mock *MockConnectorDelegate
}

func NewMockConnectorDelegate(ctrl *gomock.Controller) *MockConnectorDelegate {
	mock := &MockConnectorDelegate{ctrl: ctrl}
	mock.recorder = &_MockConnectorDelegateRecorder{mock}
	return mock
}

func (_m *MockConnectorDelegate) EXPECT() *_MockConnectorDelegateRecorder {
	return _m.recorder
}

func (_m *MockConnectorDelegate) OnText(text string) {
	_m.ctrl.Call(_m, "OnText", text)
}

func (_mr *_MockConnectorDelegateRecorder) OnText(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnText", arg0)
}

func (_m *MockConnectorDelegate) OnBinary(bytes []byte) {
	_m.ctrl.Call(_m, "OnBinary", bytes)
}

func (_mr *_MockConnectorDelegateRecorder) OnBinary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnBinary", arg0)
}

func (_m *MockConnectorDelegate) OnClosed() {
	_m.ctrl.Call(_m, "OnClosed")
}

func (_mr *_MockConnectorDelegateRecorder) OnClosed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnClosed")
}
