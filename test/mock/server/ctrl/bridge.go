// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../../server/ctrl/bridge.go

package mock_ctrl

import (
	. "github.com/ghilbut/ygg.go/common"
	. "github.com/ghilbut/ygg.go/server/ctrl"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CtrlBridge interface
type MockCtrlBridge struct {
	ctrl     *gomock.Controller
	recorder *_MockCtrlBridgeRecorder
}

// Recorder for MockCtrlBridge (not exported)
type _MockCtrlBridgeRecorder struct {
	mock *MockCtrlBridge
}

func NewMockCtrlBridge(ctrl *gomock.Controller) *MockCtrlBridge {
	mock := &MockCtrlBridge{ctrl: ctrl}
	mock.recorder = &_MockCtrlBridgeRecorder{mock}
	return mock
}

func (_m *MockCtrlBridge) EXPECT() *_MockCtrlBridgeRecorder {
	return _m.recorder
}

func (_m *MockCtrlBridge) Connect(ctrl *CtrlProxy) Connection {
	ret := _m.ctrl.Call(_m, "Connect", ctrl)
	ret0, _ := ret[0].(Connection)
	return ret0
}

func (_mr *_MockCtrlBridgeRecorder) Connect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect", arg0)
}

// Mock of CtrlBridgeDelegate interface
type MockCtrlBridgeDelegate struct {
	ctrl     *gomock.Controller
	recorder *_MockCtrlBridgeDelegateRecorder
}

// Recorder for MockCtrlBridgeDelegate (not exported)
type _MockCtrlBridgeDelegateRecorder struct {
	mock *MockCtrlBridgeDelegate
}

func NewMockCtrlBridgeDelegate(ctrl *gomock.Controller) *MockCtrlBridgeDelegate {
	mock := &MockCtrlBridgeDelegate{ctrl: ctrl}
	mock.recorder = &_MockCtrlBridgeDelegateRecorder{mock}
	return mock
}

func (_m *MockCtrlBridgeDelegate) EXPECT() *_MockCtrlBridgeDelegateRecorder {
	return _m.recorder
}

func (_m *MockCtrlBridgeDelegate) OnCtrlBridgeStarted(bridge CtrlBridge) {
	_m.ctrl.Call(_m, "OnCtrlBridgeStarted", bridge)
}

func (_mr *_MockCtrlBridgeDelegateRecorder) OnCtrlBridgeStarted(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnCtrlBridgeStarted", arg0)
}

func (_m *MockCtrlBridgeDelegate) OnCtrlBridgeStopped() {
	_m.ctrl.Call(_m, "OnCtrlBridgeStopped")
}

func (_mr *_MockCtrlBridgeDelegateRecorder) OnCtrlBridgeStopped() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnCtrlBridgeStopped")
}

func (_m *MockCtrlBridgeDelegate) OnCtrlConnected(conn Connection) {
	_m.ctrl.Call(_m, "OnCtrlConnected", conn)
}

func (_mr *_MockCtrlBridgeDelegateRecorder) OnCtrlConnected(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnCtrlConnected", arg0)
}
